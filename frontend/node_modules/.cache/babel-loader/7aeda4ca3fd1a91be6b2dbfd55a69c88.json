{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\verde\\\\Documents\\\\VsCode_Projects\\\\Movie Recommendation Website\\\\frontend\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*#__PURE__*/_jsxDEV(\"img\", {\n  src: movie.image_url,\n  alt: movie.title,\n  style: {\n    width: '200px',\n    height: '300px'\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 1\n}, this);\nconst MovieList = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:3000/movies').then(response => {\n      setMovies(response.data); // Update the state with the fetched movies\n    }).catch(error => {\n      console.error('There was an error fetching the movies!', error);\n      setError('There was an error fetching the movies!');\n    });\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [movie.title, \" (\", movie.release_year, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: movie.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), movie.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.image_url,\n        alt: movie.title,\n        style: {\n          width: '200px',\n          height: '300px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }, this)\n  }, movie.movie_id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"/oiihY625Ce2rW4TtQJCK1P9yC8=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","src","movie","image_url","alt","title","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","MovieList","_s","movies","setMovies","error","setError","get","then","response","data","catch","console","children","release_year","description","movie_id","_c","$RefreshReg$"],"sources":["C:/Users/verde/Documents/VsCode_Projects/Movie Recommendation Website/frontend/src/components/MovieList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n<img \r\n  src={movie.image_url} \r\n  alt={movie.title} \r\n  style={{ width: '200px', height: '300px' }} \r\n/>\r\n\r\nconst MovieList = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3000/movies')\r\n      .then(response => {\r\n        setMovies(response.data); // Update the state with the fetched movies\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an error fetching the movies!', error);\r\n        setError('There was an error fetching the movies!');\r\n      });\r\n  }, []); // Empty dependency array means this runs once when the component mounts\r\n  \r\n\r\n  return (\r\n    <li key={movie.movie_id}>\r\n  <div>\r\n    <h2>{movie.title} ({movie.release_year})</h2>\r\n    <p>{movie.description}</p>\r\n    {movie.image_url && (\r\n      <img \r\n        src={movie.image_url} \r\n        alt={movie.title} \r\n        style={{ width: '200px', height: '300px' }} \r\n      />\r\n    )}\r\n  </div>\r\n</li>\r\n  );\r\n  \r\n};\r\n\r\nexport default MovieList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,aAAAA,OAAA;EACEC,GAAG,EAAEC,KAAK,CAACC,SAAU;EACrBC,GAAG,EAAEF,KAAK,CAACG,KAAM;EACjBC,KAAK,EAAE;IAAEC,KAAK,EAAE,OAAO;IAAEC,MAAM,EAAE;EAAQ;AAAE;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC5C,CAAC;AAEF,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACqB,GAAG,CAAC,8BAA8B,CAAC,CACtCC,IAAI,CAACC,QAAQ,IAAI;MAChBL,SAAS,CAACK,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACN,KAAK,IAAI;MACdO,OAAO,CAACP,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/DC,QAAQ,CAAC,yCAAyC,CAAC;IACrD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAGR,oBACElB,OAAA;IAAAyB,QAAA,eACFzB,OAAA;MAAAyB,QAAA,gBACEzB,OAAA;QAAAyB,QAAA,GAAKvB,KAAK,CAACG,KAAK,EAAC,IAAE,EAACH,KAAK,CAACwB,YAAY,EAAC,GAAC;MAAA;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7CZ,OAAA;QAAAyB,QAAA,EAAIvB,KAAK,CAACyB;MAAW;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACzBV,KAAK,CAACC,SAAS,iBACdH,OAAA;QACEC,GAAG,EAAEC,KAAK,CAACC,SAAU;QACrBC,GAAG,EAAEF,KAAK,CAACG,KAAM;QACjBC,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAQ;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC,GAXKV,KAAK,CAAC0B,QAAQ;IAAAnB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAYvB,CAAC;AAGL,CAAC;AAACE,EAAA,CAhCID,SAAS;AAAAgB,EAAA,GAAThB,SAAS;AAkCf,eAAeA,SAAS;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}